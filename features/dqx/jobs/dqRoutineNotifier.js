/******************************************************************
 * DQX ÈÄ±Ë™≤ / ÊúàË™≤ ÈÄöÁü• BOT „Ç∏„Éß„Éñ
 *  1. Â∫ÉÂ†¥„ÅÆ„ÄåÊó•Ë™≤„ÉÅ„Çß„ÉÉ„ÇØË°®„Äç„Éö„Éº„Ç∏„Çí„Çπ„ÇØ„É¨„Ç§„Éî„É≥„Ç∞
 *  2. ÈÄ±Ë™≤„ÉªÊúàË™≤„ÅÆ„Åø„ÇíÊäΩÂá∫„Åó„ÄÅ„Ç´„ÉÜ„Ç¥„É™Âà•„Å´Êï¥ÂΩ¢
 *  3. Discord „Å´„Åã„Çè„ÅÑ„Åè Embed „ÅßÊäïÁ®ø
 ******************************************************************/
const fetch   = require('node-fetch');          // v2
const cheerio = require('cheerio');
const cron    = require('node-cron');
const moment  = require('moment-timezone');
const { EmbedBuilder, ChannelType } = require('discord.js');

const URL = 'https://xn--10-yg4a1a3kyh.jp/dq10_routine.html';

/** ===================== ÊäΩÂá∫„Ç≠„Éº„ÉØ„Éº„Éâ ===================== */
const WEEK_KEYS = ['ÈÄ±Ë™≤', '„Éî„É©„Éü„ÉÉ„Éâ', 'Ë©¶Á∑¥', 'ÈÅî‰∫∫', 'È≠îÂ°î', 'Â≠¶Âúí'];
const MONTH_KEYS = ['ÈÇ™Á•û', 'ÂøÉÂ±§', 'ËÅñÂÆàË≠∑ËÄÖ', 'Ê∫ê‰∏ñÂ∫´', '„Éï„Çß„Çπ„Çø'];

/** „Ç´„ÉÜ„Ç¥„É™„Éº„Éû„ÉÉ„Éó: „Ç≠„Éº„ÉØ„Éº„Éâ‚Üí„Ç´„ÉÜ„Ç¥„É™„ÉºÂêç + „Ç¢„Ç§„Ç≥„É≥ */
const CATEGORY_DEFS = [
  { icon: 'üó°', name: 'Ë®é‰ºêÁ≥ª',    match: /Ë®é‰ºê|ÈÇ™Á•û|ËÅñÂÆàË≠∑ËÄÖ|ÂøÉÂ±§/ },
  { icon: 'üéì', name: 'ËÇ≤ÊàêÁ≥ª',    match: /Â≠¶Âúí|‰øÆÁ∑¥|ÁµåÈ®ìÂÄ§/ },
  { icon: 'üí∞', name: 'Â†±ÈÖ¨Á≥ª',    match: /„Ç¥„Éº„É´„Éâ|ÂÆùÁè†|„Ç¢„ÇØ„Çª|„Ç≥„Ç§„É≥/ },
  { icon: 'üé≤', name: '„Ç≥„É≥„ÉÜ„É≥„ÉÑ', match: /„Éï„Çß„Çπ„Çø|Ë©¶Á∑¥|„Éî„É©„Éü„ÉÉ„Éâ|È≠îÂ°î/ },
];

/** ===================== HTML „Çπ„ÇØ„É¨„Ç§„Éî„É≥„Ç∞ ===================== */
async function scrapeList() {
  const html = await fetch(URL).then(r => r.text());
  const $ = cheerio.load(html);
  return $('tr')
    .map((_, tr) => $(tr).text().trim().replace(/\s+/g, ' '))
    .get();
}

/** ===================== ÊúüÈñì„ÅÆÊñáÂ≠óÂàó ===================== */
function getWeekRangeJST() {
  const start = moment.tz('Asia/Tokyo').startOf('isoWeek'); // ÊúàÊõúÂßã„Åæ„Çä
  const end   = moment(start).add(6, 'days');
  return `${start.format('M/D')}„Äú${end.format('M/D')}`;
}

function getMonthStrJST() {
  return moment.tz('Asia/Tokyo').format('MÊúà');
}

/** ===================== „Ç´„ÉÜ„Ç¥„É™ÂàÜ„Åë ===================== */
function categorize(items) {
  const buckets = {};

  // Ë©≤ÂΩì„Åó„Å™„ÅÑ„ÇÇ„ÅÆ„ÅØ„Äå„Åù„ÅÆ‰ªñ„Äç„Å´ÂÖ•„Çå„Çã
  items.forEach(line => {
    const def = CATEGORY_DEFS.find(d => d.match.test(line)) || { icon: 'üìå', name: '„Åù„ÅÆ‰ªñ' };
    const key = `${def.icon} ${def.name}`;
    if (!buckets[key]) buckets[key] = [];
    buckets[key].push(line);
  });

  return buckets; // { 'üó° Ë®é‰ºêÁ≥ª': [ ... ], ... }
}

/** ===================== Discord ÈÄÅ‰ø° ===================== */
async function sendRoutine(client, channelId, kind = 'weekly') {
  const all  = await scrapeList();
  const keys = kind === 'weekly' ? WEEK_KEYS : MONTH_KEYS;
  const list = all.filter(r => keys.some(k => r.includes(k)));
  if (!list.length) return;

  const buckets = categorize(list);
  const desc = Object.entries(buckets)
    .map(([cat, lines]) => `**${cat}**\n${lines.map(l => `„Éª${l}`).join('\n')}`)
    .join('\n\n');

  const title = kind === 'weekly'
    ? `üè∞ ‰ªäÈÄ±„ÅÆÈÄ±Ë™≤Ôºà${getWeekRangeJST()}Ôºâ`
    : `üè∞ ${getMonthStrJST()}„ÅÆÊúàË™≤`;

  const embed = new EmbedBuilder()
    .setColor(kind === 'weekly' ? 0x89CFF0 : 0xFFD700)        // „Éë„Çπ„ÉÜ„É´„Éñ„É´„Éº / „Ç¥„Éº„É´„Éâ
    .setTitle(title)
    .setAuthor({ name: 'butterfly-bot', iconURL: client.user.displayAvatarURL() })
    .setDescription(desc)
    .setFooter({ text: 'Âá∫ÂÖ∏: dq10 Êó•Ë™≤„ÉÅ„Çß„ÉÉ„ÇØË°®' })
    .setTimestamp();

  const ch = await client.channels.fetch(channelId).catch(() => null);
  if (!ch || ch.type !== ChannelType.GuildText) return;
  await ch.send({ embeds: [embed] });
}

/** ===================== „Ç∏„Éß„ÉñÁôªÈå≤ ===================== */
module.exports = (client) => {
  const chId = process.env.DQ_ROUTINE_CHANNEL_ID;
  if (!chId) return;

  // ÊØéÈÄ± ÊúàÊõú 6:00 JST
  cron.schedule('0 6 * * 1', () => sendRoutine(client, chId, 'weekly'),
    { timezone: 'Asia/Tokyo' });

  // ÊØéÊúà 1Êó• 6:00 JST
  cron.schedule('0 6 1 * *', () => sendRoutine(client, chId, 'monthly'),
    { timezone: 'Asia/Tokyo' });

  // „ÉÜ„Çπ„Éà„É¢„Éº„Éâ
  if (process.env.DQ_ROUTINE_TEST === 'true') {
    sendRoutine(client, chId, 'weekly');
    sendRoutine(client, chId, 'monthly');
  }
};

/* ============================================================
 * ‰æùÂ≠ò:
 *   npm i node-fetch@2 cheerio node-cron moment-timezone
 * ============================================================ */
